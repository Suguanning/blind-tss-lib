// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protob/ecdsa-keygen.proto

#include "protob/ecdsa-keygen.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace binance {
namespace tsslib {
namespace ecdsa {
namespace keygen {

inline constexpr KGRound3Message::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : paillier_proof_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR KGRound3Message::KGRound3Message(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct KGRound3MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KGRound3MessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~KGRound3MessageDefaultTypeInternal() {}
  union {
    KGRound3Message _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KGRound3MessageDefaultTypeInternal _KGRound3Message_default_instance_;

inline constexpr KGRound2Message2::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : de_commitment_{},
        modproof_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR KGRound2Message2::KGRound2Message2(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct KGRound2Message2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR KGRound2Message2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~KGRound2Message2DefaultTypeInternal() {}
  union {
    KGRound2Message2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KGRound2Message2DefaultTypeInternal _KGRound2Message2_default_instance_;

inline constexpr KGRound2Message1::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : facproof_{},
        share_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR KGRound2Message1::KGRound2Message1(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct KGRound2Message1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR KGRound2Message1DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~KGRound2Message1DefaultTypeInternal() {}
  union {
    KGRound2Message1 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KGRound2Message1DefaultTypeInternal _KGRound2Message1_default_instance_;

inline constexpr KGRound1Message::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : dlnproof_1_{},
        dlnproof_2_{},
        commitment_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        paillier_n_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        n_tilde_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        h1_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        h2_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR KGRound1Message::KGRound1Message(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct KGRound1MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KGRound1MessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~KGRound1MessageDefaultTypeInternal() {}
  union {
    KGRound1Message _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KGRound1MessageDefaultTypeInternal _KGRound1Message_default_instance_;
}  // namespace keygen
}  // namespace ecdsa
}  // namespace tsslib
}  // namespace binance
static ::_pb::Metadata file_level_metadata_protob_2fecdsa_2dkeygen_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protob_2fecdsa_2dkeygen_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protob_2fecdsa_2dkeygen_2eproto = nullptr;
const ::uint32_t TableStruct_protob_2fecdsa_2dkeygen_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::ecdsa::keygen::KGRound1Message, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::ecdsa::keygen::KGRound1Message, _impl_.commitment_),
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::ecdsa::keygen::KGRound1Message, _impl_.paillier_n_),
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::ecdsa::keygen::KGRound1Message, _impl_.n_tilde_),
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::ecdsa::keygen::KGRound1Message, _impl_.h1_),
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::ecdsa::keygen::KGRound1Message, _impl_.h2_),
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::ecdsa::keygen::KGRound1Message, _impl_.dlnproof_1_),
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::ecdsa::keygen::KGRound1Message, _impl_.dlnproof_2_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::ecdsa::keygen::KGRound2Message1, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::ecdsa::keygen::KGRound2Message1, _impl_.share_),
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::ecdsa::keygen::KGRound2Message1, _impl_.facproof_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::ecdsa::keygen::KGRound2Message2, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::ecdsa::keygen::KGRound2Message2, _impl_.de_commitment_),
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::ecdsa::keygen::KGRound2Message2, _impl_.modproof_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::ecdsa::keygen::KGRound3Message, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::ecdsa::keygen::KGRound3Message, _impl_.paillier_proof_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::binance::tsslib::ecdsa::keygen::KGRound1Message)},
        {15, -1, -1, sizeof(::binance::tsslib::ecdsa::keygen::KGRound2Message1)},
        {25, -1, -1, sizeof(::binance::tsslib::ecdsa::keygen::KGRound2Message2)},
        {35, -1, -1, sizeof(::binance::tsslib::ecdsa::keygen::KGRound3Message)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::binance::tsslib::ecdsa::keygen::_KGRound1Message_default_instance_._instance,
    &::binance::tsslib::ecdsa::keygen::_KGRound2Message1_default_instance_._instance,
    &::binance::tsslib::ecdsa::keygen::_KGRound2Message2_default_instance_._instance,
    &::binance::tsslib::ecdsa::keygen::_KGRound3Message_default_instance_._instance,
};
const char descriptor_table_protodef_protob_2fecdsa_2dkeygen_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\031protob/ecdsa-keygen.proto\022\033binance.tss"
    "lib.ecdsa.keygen\"\212\001\n\017KGRound1Message\022\022\n\n"
    "commitment\030\001 \001(\014\022\022\n\npaillier_n\030\002 \001(\014\022\017\n\007"
    "n_tilde\030\003 \001(\014\022\n\n\002h1\030\004 \001(\014\022\n\n\002h2\030\005 \001(\014\022\022\n"
    "\ndlnproof_1\030\006 \003(\014\022\022\n\ndlnproof_2\030\007 \003(\014\"3\n"
    "\020KGRound2Message1\022\r\n\005share\030\001 \001(\014\022\020\n\010facP"
    "roof\030\002 \003(\014\";\n\020KGRound2Message2\022\025\n\rde_com"
    "mitment\030\001 \003(\014\022\020\n\010modProof\030\002 \003(\014\")\n\017KGRou"
    "nd3Message\022\026\n\016paillier_proof\030\001 \003(\014B\016Z\014ec"
    "dsa/keygenb\006proto3"
};
static ::absl::once_flag descriptor_table_protob_2fecdsa_2dkeygen_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protob_2fecdsa_2dkeygen_2eproto = {
    false,
    false,
    378,
    descriptor_table_protodef_protob_2fecdsa_2dkeygen_2eproto,
    "protob/ecdsa-keygen.proto",
    &descriptor_table_protob_2fecdsa_2dkeygen_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_protob_2fecdsa_2dkeygen_2eproto::offsets,
    file_level_metadata_protob_2fecdsa_2dkeygen_2eproto,
    file_level_enum_descriptors_protob_2fecdsa_2dkeygen_2eproto,
    file_level_service_descriptors_protob_2fecdsa_2dkeygen_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protob_2fecdsa_2dkeygen_2eproto_getter() {
  return &descriptor_table_protob_2fecdsa_2dkeygen_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protob_2fecdsa_2dkeygen_2eproto(&descriptor_table_protob_2fecdsa_2dkeygen_2eproto);
namespace binance {
namespace tsslib {
namespace ecdsa {
namespace keygen {
// ===================================================================

class KGRound1Message::_Internal {
 public:
};

KGRound1Message::KGRound1Message(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:binance.tsslib.ecdsa.keygen.KGRound1Message)
}
inline PROTOBUF_NDEBUG_INLINE KGRound1Message::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : dlnproof_1_{visibility, arena, from.dlnproof_1_},
        dlnproof_2_{visibility, arena, from.dlnproof_2_},
        commitment_(arena, from.commitment_),
        paillier_n_(arena, from.paillier_n_),
        n_tilde_(arena, from.n_tilde_),
        h1_(arena, from.h1_),
        h2_(arena, from.h2_),
        _cached_size_{0} {}

KGRound1Message::KGRound1Message(
    ::google::protobuf::Arena* arena,
    const KGRound1Message& from)
    : ::google::protobuf::Message(arena) {
  KGRound1Message* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:binance.tsslib.ecdsa.keygen.KGRound1Message)
}
inline PROTOBUF_NDEBUG_INLINE KGRound1Message::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : dlnproof_1_{visibility, arena},
        dlnproof_2_{visibility, arena},
        commitment_(arena),
        paillier_n_(arena),
        n_tilde_(arena),
        h1_(arena),
        h2_(arena),
        _cached_size_{0} {}

inline void KGRound1Message::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
KGRound1Message::~KGRound1Message() {
  // @@protoc_insertion_point(destructor:binance.tsslib.ecdsa.keygen.KGRound1Message)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void KGRound1Message::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.commitment_.Destroy();
  _impl_.paillier_n_.Destroy();
  _impl_.n_tilde_.Destroy();
  _impl_.h1_.Destroy();
  _impl_.h2_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void KGRound1Message::Clear() {
// @@protoc_insertion_point(message_clear_start:binance.tsslib.ecdsa.keygen.KGRound1Message)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dlnproof_1_.Clear();
  _impl_.dlnproof_2_.Clear();
  _impl_.commitment_.ClearToEmpty();
  _impl_.paillier_n_.ClearToEmpty();
  _impl_.n_tilde_.ClearToEmpty();
  _impl_.h1_.ClearToEmpty();
  _impl_.h2_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* KGRound1Message::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> KGRound1Message::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_KGRound1Message_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bytes commitment = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(KGRound1Message, _impl_.commitment_)}},
    // bytes paillier_n = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(KGRound1Message, _impl_.paillier_n_)}},
    // bytes n_tilde = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(KGRound1Message, _impl_.n_tilde_)}},
    // bytes h1 = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(KGRound1Message, _impl_.h1_)}},
    // bytes h2 = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(KGRound1Message, _impl_.h2_)}},
    // repeated bytes dlnproof_1 = 6;
    {::_pbi::TcParser::FastBR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(KGRound1Message, _impl_.dlnproof_1_)}},
    // repeated bytes dlnproof_2 = 7;
    {::_pbi::TcParser::FastBR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(KGRound1Message, _impl_.dlnproof_2_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes commitment = 1;
    {PROTOBUF_FIELD_OFFSET(KGRound1Message, _impl_.commitment_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes paillier_n = 2;
    {PROTOBUF_FIELD_OFFSET(KGRound1Message, _impl_.paillier_n_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes n_tilde = 3;
    {PROTOBUF_FIELD_OFFSET(KGRound1Message, _impl_.n_tilde_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes h1 = 4;
    {PROTOBUF_FIELD_OFFSET(KGRound1Message, _impl_.h1_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes h2 = 5;
    {PROTOBUF_FIELD_OFFSET(KGRound1Message, _impl_.h2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // repeated bytes dlnproof_1 = 6;
    {PROTOBUF_FIELD_OFFSET(KGRound1Message, _impl_.dlnproof_1_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
    // repeated bytes dlnproof_2 = 7;
    {PROTOBUF_FIELD_OFFSET(KGRound1Message, _impl_.dlnproof_2_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* KGRound1Message::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:binance.tsslib.ecdsa.keygen.KGRound1Message)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes commitment = 1;
  if (!this->_internal_commitment().empty()) {
    const std::string& _s = this->_internal_commitment();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // bytes paillier_n = 2;
  if (!this->_internal_paillier_n().empty()) {
    const std::string& _s = this->_internal_paillier_n();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // bytes n_tilde = 3;
  if (!this->_internal_n_tilde().empty()) {
    const std::string& _s = this->_internal_n_tilde();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // bytes h1 = 4;
  if (!this->_internal_h1().empty()) {
    const std::string& _s = this->_internal_h1();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // bytes h2 = 5;
  if (!this->_internal_h2().empty()) {
    const std::string& _s = this->_internal_h2();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  // repeated bytes dlnproof_1 = 6;
  for (int i = 0, n = this->_internal_dlnproof_1_size(); i < n; ++i) {
    const auto& s = this->_internal_dlnproof_1().Get(i);
    target = stream->WriteBytes(6, s, target);
  }

  // repeated bytes dlnproof_2 = 7;
  for (int i = 0, n = this->_internal_dlnproof_2_size(); i < n; ++i) {
    const auto& s = this->_internal_dlnproof_2().Get(i);
    target = stream->WriteBytes(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:binance.tsslib.ecdsa.keygen.KGRound1Message)
  return target;
}

::size_t KGRound1Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:binance.tsslib.ecdsa.keygen.KGRound1Message)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes dlnproof_1 = 6;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_dlnproof_1().size());
  for (int i = 0, n = _internal_dlnproof_1().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
        _internal_dlnproof_1().Get(i));
  }
  // repeated bytes dlnproof_2 = 7;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_dlnproof_2().size());
  for (int i = 0, n = _internal_dlnproof_2().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
        _internal_dlnproof_2().Get(i));
  }
  // bytes commitment = 1;
  if (!this->_internal_commitment().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_commitment());
  }

  // bytes paillier_n = 2;
  if (!this->_internal_paillier_n().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_paillier_n());
  }

  // bytes n_tilde = 3;
  if (!this->_internal_n_tilde().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_n_tilde());
  }

  // bytes h1 = 4;
  if (!this->_internal_h1().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_h1());
  }

  // bytes h2 = 5;
  if (!this->_internal_h2().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_h2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData KGRound1Message::_class_data_ = {
    KGRound1Message::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* KGRound1Message::GetClassData() const {
  return &_class_data_;
}

void KGRound1Message::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<KGRound1Message*>(&to_msg);
  auto& from = static_cast<const KGRound1Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:binance.tsslib.ecdsa.keygen.KGRound1Message)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_dlnproof_1()->MergeFrom(from._internal_dlnproof_1());
  _this->_internal_mutable_dlnproof_2()->MergeFrom(from._internal_dlnproof_2());
  if (!from._internal_commitment().empty()) {
    _this->_internal_set_commitment(from._internal_commitment());
  }
  if (!from._internal_paillier_n().empty()) {
    _this->_internal_set_paillier_n(from._internal_paillier_n());
  }
  if (!from._internal_n_tilde().empty()) {
    _this->_internal_set_n_tilde(from._internal_n_tilde());
  }
  if (!from._internal_h1().empty()) {
    _this->_internal_set_h1(from._internal_h1());
  }
  if (!from._internal_h2().empty()) {
    _this->_internal_set_h2(from._internal_h2());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void KGRound1Message::CopyFrom(const KGRound1Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:binance.tsslib.ecdsa.keygen.KGRound1Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool KGRound1Message::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* KGRound1Message::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void KGRound1Message::InternalSwap(KGRound1Message* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dlnproof_1_.InternalSwap(&other->_impl_.dlnproof_1_);
  _impl_.dlnproof_2_.InternalSwap(&other->_impl_.dlnproof_2_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.commitment_, &other->_impl_.commitment_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.paillier_n_, &other->_impl_.paillier_n_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.n_tilde_, &other->_impl_.n_tilde_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.h1_, &other->_impl_.h1_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.h2_, &other->_impl_.h2_, arena);
}

::google::protobuf::Metadata KGRound1Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protob_2fecdsa_2dkeygen_2eproto_getter, &descriptor_table_protob_2fecdsa_2dkeygen_2eproto_once,
      file_level_metadata_protob_2fecdsa_2dkeygen_2eproto[0]);
}
// ===================================================================

class KGRound2Message1::_Internal {
 public:
};

KGRound2Message1::KGRound2Message1(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:binance.tsslib.ecdsa.keygen.KGRound2Message1)
}
inline PROTOBUF_NDEBUG_INLINE KGRound2Message1::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : facproof_{visibility, arena, from.facproof_},
        share_(arena, from.share_),
        _cached_size_{0} {}

KGRound2Message1::KGRound2Message1(
    ::google::protobuf::Arena* arena,
    const KGRound2Message1& from)
    : ::google::protobuf::Message(arena) {
  KGRound2Message1* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:binance.tsslib.ecdsa.keygen.KGRound2Message1)
}
inline PROTOBUF_NDEBUG_INLINE KGRound2Message1::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : facproof_{visibility, arena},
        share_(arena),
        _cached_size_{0} {}

inline void KGRound2Message1::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
KGRound2Message1::~KGRound2Message1() {
  // @@protoc_insertion_point(destructor:binance.tsslib.ecdsa.keygen.KGRound2Message1)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void KGRound2Message1::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.share_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void KGRound2Message1::Clear() {
// @@protoc_insertion_point(message_clear_start:binance.tsslib.ecdsa.keygen.KGRound2Message1)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.facproof_.Clear();
  _impl_.share_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* KGRound2Message1::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> KGRound2Message1::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_KGRound2Message1_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated bytes facProof = 2;
    {::_pbi::TcParser::FastBR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(KGRound2Message1, _impl_.facproof_)}},
    // bytes share = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(KGRound2Message1, _impl_.share_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes share = 1;
    {PROTOBUF_FIELD_OFFSET(KGRound2Message1, _impl_.share_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // repeated bytes facProof = 2;
    {PROTOBUF_FIELD_OFFSET(KGRound2Message1, _impl_.facproof_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* KGRound2Message1::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:binance.tsslib.ecdsa.keygen.KGRound2Message1)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes share = 1;
  if (!this->_internal_share().empty()) {
    const std::string& _s = this->_internal_share();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // repeated bytes facProof = 2;
  for (int i = 0, n = this->_internal_facproof_size(); i < n; ++i) {
    const auto& s = this->_internal_facproof().Get(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:binance.tsslib.ecdsa.keygen.KGRound2Message1)
  return target;
}

::size_t KGRound2Message1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:binance.tsslib.ecdsa.keygen.KGRound2Message1)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes facProof = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_facproof().size());
  for (int i = 0, n = _internal_facproof().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
        _internal_facproof().Get(i));
  }
  // bytes share = 1;
  if (!this->_internal_share().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_share());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData KGRound2Message1::_class_data_ = {
    KGRound2Message1::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* KGRound2Message1::GetClassData() const {
  return &_class_data_;
}

void KGRound2Message1::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<KGRound2Message1*>(&to_msg);
  auto& from = static_cast<const KGRound2Message1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:binance.tsslib.ecdsa.keygen.KGRound2Message1)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_facproof()->MergeFrom(from._internal_facproof());
  if (!from._internal_share().empty()) {
    _this->_internal_set_share(from._internal_share());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void KGRound2Message1::CopyFrom(const KGRound2Message1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:binance.tsslib.ecdsa.keygen.KGRound2Message1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool KGRound2Message1::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* KGRound2Message1::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void KGRound2Message1::InternalSwap(KGRound2Message1* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.facproof_.InternalSwap(&other->_impl_.facproof_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.share_, &other->_impl_.share_, arena);
}

::google::protobuf::Metadata KGRound2Message1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protob_2fecdsa_2dkeygen_2eproto_getter, &descriptor_table_protob_2fecdsa_2dkeygen_2eproto_once,
      file_level_metadata_protob_2fecdsa_2dkeygen_2eproto[1]);
}
// ===================================================================

class KGRound2Message2::_Internal {
 public:
};

KGRound2Message2::KGRound2Message2(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:binance.tsslib.ecdsa.keygen.KGRound2Message2)
}
inline PROTOBUF_NDEBUG_INLINE KGRound2Message2::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : de_commitment_{visibility, arena, from.de_commitment_},
        modproof_{visibility, arena, from.modproof_},
        _cached_size_{0} {}

KGRound2Message2::KGRound2Message2(
    ::google::protobuf::Arena* arena,
    const KGRound2Message2& from)
    : ::google::protobuf::Message(arena) {
  KGRound2Message2* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:binance.tsslib.ecdsa.keygen.KGRound2Message2)
}
inline PROTOBUF_NDEBUG_INLINE KGRound2Message2::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : de_commitment_{visibility, arena},
        modproof_{visibility, arena},
        _cached_size_{0} {}

inline void KGRound2Message2::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
KGRound2Message2::~KGRound2Message2() {
  // @@protoc_insertion_point(destructor:binance.tsslib.ecdsa.keygen.KGRound2Message2)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void KGRound2Message2::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void KGRound2Message2::Clear() {
// @@protoc_insertion_point(message_clear_start:binance.tsslib.ecdsa.keygen.KGRound2Message2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.de_commitment_.Clear();
  _impl_.modproof_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* KGRound2Message2::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> KGRound2Message2::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_KGRound2Message2_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated bytes modProof = 2;
    {::_pbi::TcParser::FastBR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(KGRound2Message2, _impl_.modproof_)}},
    // repeated bytes de_commitment = 1;
    {::_pbi::TcParser::FastBR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(KGRound2Message2, _impl_.de_commitment_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated bytes de_commitment = 1;
    {PROTOBUF_FIELD_OFFSET(KGRound2Message2, _impl_.de_commitment_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
    // repeated bytes modProof = 2;
    {PROTOBUF_FIELD_OFFSET(KGRound2Message2, _impl_.modproof_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* KGRound2Message2::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:binance.tsslib.ecdsa.keygen.KGRound2Message2)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated bytes de_commitment = 1;
  for (int i = 0, n = this->_internal_de_commitment_size(); i < n; ++i) {
    const auto& s = this->_internal_de_commitment().Get(i);
    target = stream->WriteBytes(1, s, target);
  }

  // repeated bytes modProof = 2;
  for (int i = 0, n = this->_internal_modproof_size(); i < n; ++i) {
    const auto& s = this->_internal_modproof().Get(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:binance.tsslib.ecdsa.keygen.KGRound2Message2)
  return target;
}

::size_t KGRound2Message2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:binance.tsslib.ecdsa.keygen.KGRound2Message2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes de_commitment = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_de_commitment().size());
  for (int i = 0, n = _internal_de_commitment().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
        _internal_de_commitment().Get(i));
  }
  // repeated bytes modProof = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_modproof().size());
  for (int i = 0, n = _internal_modproof().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
        _internal_modproof().Get(i));
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData KGRound2Message2::_class_data_ = {
    KGRound2Message2::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* KGRound2Message2::GetClassData() const {
  return &_class_data_;
}

void KGRound2Message2::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<KGRound2Message2*>(&to_msg);
  auto& from = static_cast<const KGRound2Message2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:binance.tsslib.ecdsa.keygen.KGRound2Message2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_de_commitment()->MergeFrom(from._internal_de_commitment());
  _this->_internal_mutable_modproof()->MergeFrom(from._internal_modproof());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void KGRound2Message2::CopyFrom(const KGRound2Message2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:binance.tsslib.ecdsa.keygen.KGRound2Message2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool KGRound2Message2::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* KGRound2Message2::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void KGRound2Message2::InternalSwap(KGRound2Message2* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.de_commitment_.InternalSwap(&other->_impl_.de_commitment_);
  _impl_.modproof_.InternalSwap(&other->_impl_.modproof_);
}

::google::protobuf::Metadata KGRound2Message2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protob_2fecdsa_2dkeygen_2eproto_getter, &descriptor_table_protob_2fecdsa_2dkeygen_2eproto_once,
      file_level_metadata_protob_2fecdsa_2dkeygen_2eproto[2]);
}
// ===================================================================

class KGRound3Message::_Internal {
 public:
};

KGRound3Message::KGRound3Message(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:binance.tsslib.ecdsa.keygen.KGRound3Message)
}
inline PROTOBUF_NDEBUG_INLINE KGRound3Message::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : paillier_proof_{visibility, arena, from.paillier_proof_},
        _cached_size_{0} {}

KGRound3Message::KGRound3Message(
    ::google::protobuf::Arena* arena,
    const KGRound3Message& from)
    : ::google::protobuf::Message(arena) {
  KGRound3Message* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:binance.tsslib.ecdsa.keygen.KGRound3Message)
}
inline PROTOBUF_NDEBUG_INLINE KGRound3Message::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : paillier_proof_{visibility, arena},
        _cached_size_{0} {}

inline void KGRound3Message::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
KGRound3Message::~KGRound3Message() {
  // @@protoc_insertion_point(destructor:binance.tsslib.ecdsa.keygen.KGRound3Message)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void KGRound3Message::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void KGRound3Message::Clear() {
// @@protoc_insertion_point(message_clear_start:binance.tsslib.ecdsa.keygen.KGRound3Message)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.paillier_proof_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* KGRound3Message::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> KGRound3Message::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_KGRound3Message_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated bytes paillier_proof = 1;
    {::_pbi::TcParser::FastBR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(KGRound3Message, _impl_.paillier_proof_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated bytes paillier_proof = 1;
    {PROTOBUF_FIELD_OFFSET(KGRound3Message, _impl_.paillier_proof_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* KGRound3Message::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:binance.tsslib.ecdsa.keygen.KGRound3Message)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated bytes paillier_proof = 1;
  for (int i = 0, n = this->_internal_paillier_proof_size(); i < n; ++i) {
    const auto& s = this->_internal_paillier_proof().Get(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:binance.tsslib.ecdsa.keygen.KGRound3Message)
  return target;
}

::size_t KGRound3Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:binance.tsslib.ecdsa.keygen.KGRound3Message)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes paillier_proof = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_paillier_proof().size());
  for (int i = 0, n = _internal_paillier_proof().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
        _internal_paillier_proof().Get(i));
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData KGRound3Message::_class_data_ = {
    KGRound3Message::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* KGRound3Message::GetClassData() const {
  return &_class_data_;
}

void KGRound3Message::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<KGRound3Message*>(&to_msg);
  auto& from = static_cast<const KGRound3Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:binance.tsslib.ecdsa.keygen.KGRound3Message)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_paillier_proof()->MergeFrom(from._internal_paillier_proof());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void KGRound3Message::CopyFrom(const KGRound3Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:binance.tsslib.ecdsa.keygen.KGRound3Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool KGRound3Message::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* KGRound3Message::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void KGRound3Message::InternalSwap(KGRound3Message* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.paillier_proof_.InternalSwap(&other->_impl_.paillier_proof_);
}

::google::protobuf::Metadata KGRound3Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protob_2fecdsa_2dkeygen_2eproto_getter, &descriptor_table_protob_2fecdsa_2dkeygen_2eproto_once,
      file_level_metadata_protob_2fecdsa_2dkeygen_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace keygen
}  // namespace ecdsa
}  // namespace tsslib
}  // namespace binance
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
