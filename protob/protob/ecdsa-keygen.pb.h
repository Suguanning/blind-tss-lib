// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protob/ecdsa-keygen.proto
// Protobuf C++ Version: 4.25.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_protob_2fecdsa_2dkeygen_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protob_2fecdsa_2dkeygen_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protob_2fecdsa_2dkeygen_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_protob_2fecdsa_2dkeygen_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_protob_2fecdsa_2dkeygen_2eproto;
namespace binance {
namespace tsslib {
namespace ecdsa {
namespace keygen {
class KGRound1Message;
struct KGRound1MessageDefaultTypeInternal;
extern KGRound1MessageDefaultTypeInternal _KGRound1Message_default_instance_;
class KGRound2Message1;
struct KGRound2Message1DefaultTypeInternal;
extern KGRound2Message1DefaultTypeInternal _KGRound2Message1_default_instance_;
class KGRound2Message2;
struct KGRound2Message2DefaultTypeInternal;
extern KGRound2Message2DefaultTypeInternal _KGRound2Message2_default_instance_;
class KGRound3Message;
struct KGRound3MessageDefaultTypeInternal;
extern KGRound3MessageDefaultTypeInternal _KGRound3Message_default_instance_;
}  // namespace keygen
}  // namespace ecdsa
}  // namespace tsslib
}  // namespace binance
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace binance {
namespace tsslib {
namespace ecdsa {
namespace keygen {

// ===================================================================


// -------------------------------------------------------------------

class KGRound3Message final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:binance.tsslib.ecdsa.keygen.KGRound3Message) */ {
 public:
  inline KGRound3Message() : KGRound3Message(nullptr) {}
  ~KGRound3Message() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KGRound3Message(::google::protobuf::internal::ConstantInitialized);

  inline KGRound3Message(const KGRound3Message& from)
      : KGRound3Message(nullptr, from) {}
  KGRound3Message(KGRound3Message&& from) noexcept
    : KGRound3Message() {
    *this = ::std::move(from);
  }

  inline KGRound3Message& operator=(const KGRound3Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline KGRound3Message& operator=(KGRound3Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KGRound3Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const KGRound3Message* internal_default_instance() {
    return reinterpret_cast<const KGRound3Message*>(
               &_KGRound3Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KGRound3Message& a, KGRound3Message& b) {
    a.Swap(&b);
  }
  inline void Swap(KGRound3Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KGRound3Message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KGRound3Message* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KGRound3Message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const KGRound3Message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const KGRound3Message& from) {
    KGRound3Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(KGRound3Message* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "binance.tsslib.ecdsa.keygen.KGRound3Message";
  }
  protected:
  explicit KGRound3Message(::google::protobuf::Arena* arena);
  KGRound3Message(::google::protobuf::Arena* arena, const KGRound3Message& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaillierProofFieldNumber = 1,
  };
  // repeated bytes paillier_proof = 1;
  int paillier_proof_size() const;
  private:
  int _internal_paillier_proof_size() const;

  public:
  void clear_paillier_proof() ;
  const std::string& paillier_proof(int index) const;
  std::string* mutable_paillier_proof(int index);
  void set_paillier_proof(int index, const std::string& value);
  void set_paillier_proof(int index, std::string&& value);
  void set_paillier_proof(int index, const char* value);
  void set_paillier_proof(int index, const void* value, std::size_t size);
  void set_paillier_proof(int index, absl::string_view value);
  std::string* add_paillier_proof();
  void add_paillier_proof(const std::string& value);
  void add_paillier_proof(std::string&& value);
  void add_paillier_proof(const char* value);
  void add_paillier_proof(const void* value, std::size_t size);
  void add_paillier_proof(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& paillier_proof() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_paillier_proof();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_paillier_proof() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_paillier_proof();

  public:
  // @@protoc_insertion_point(class_scope:binance.tsslib.ecdsa.keygen.KGRound3Message)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> paillier_proof_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protob_2fecdsa_2dkeygen_2eproto;
};// -------------------------------------------------------------------

class KGRound2Message2 final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:binance.tsslib.ecdsa.keygen.KGRound2Message2) */ {
 public:
  inline KGRound2Message2() : KGRound2Message2(nullptr) {}
  ~KGRound2Message2() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KGRound2Message2(::google::protobuf::internal::ConstantInitialized);

  inline KGRound2Message2(const KGRound2Message2& from)
      : KGRound2Message2(nullptr, from) {}
  KGRound2Message2(KGRound2Message2&& from) noexcept
    : KGRound2Message2() {
    *this = ::std::move(from);
  }

  inline KGRound2Message2& operator=(const KGRound2Message2& from) {
    CopyFrom(from);
    return *this;
  }
  inline KGRound2Message2& operator=(KGRound2Message2&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KGRound2Message2& default_instance() {
    return *internal_default_instance();
  }
  static inline const KGRound2Message2* internal_default_instance() {
    return reinterpret_cast<const KGRound2Message2*>(
               &_KGRound2Message2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KGRound2Message2& a, KGRound2Message2& b) {
    a.Swap(&b);
  }
  inline void Swap(KGRound2Message2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KGRound2Message2* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KGRound2Message2* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KGRound2Message2>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const KGRound2Message2& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const KGRound2Message2& from) {
    KGRound2Message2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(KGRound2Message2* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "binance.tsslib.ecdsa.keygen.KGRound2Message2";
  }
  protected:
  explicit KGRound2Message2(::google::protobuf::Arena* arena);
  KGRound2Message2(::google::protobuf::Arena* arena, const KGRound2Message2& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeCommitmentFieldNumber = 1,
    kModProofFieldNumber = 2,
  };
  // repeated bytes de_commitment = 1;
  int de_commitment_size() const;
  private:
  int _internal_de_commitment_size() const;

  public:
  void clear_de_commitment() ;
  const std::string& de_commitment(int index) const;
  std::string* mutable_de_commitment(int index);
  void set_de_commitment(int index, const std::string& value);
  void set_de_commitment(int index, std::string&& value);
  void set_de_commitment(int index, const char* value);
  void set_de_commitment(int index, const void* value, std::size_t size);
  void set_de_commitment(int index, absl::string_view value);
  std::string* add_de_commitment();
  void add_de_commitment(const std::string& value);
  void add_de_commitment(std::string&& value);
  void add_de_commitment(const char* value);
  void add_de_commitment(const void* value, std::size_t size);
  void add_de_commitment(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& de_commitment() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_de_commitment();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_de_commitment() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_de_commitment();

  public:
  // repeated bytes modProof = 2;
  int modproof_size() const;
  private:
  int _internal_modproof_size() const;

  public:
  void clear_modproof() ;
  const std::string& modproof(int index) const;
  std::string* mutable_modproof(int index);
  void set_modproof(int index, const std::string& value);
  void set_modproof(int index, std::string&& value);
  void set_modproof(int index, const char* value);
  void set_modproof(int index, const void* value, std::size_t size);
  void set_modproof(int index, absl::string_view value);
  std::string* add_modproof();
  void add_modproof(const std::string& value);
  void add_modproof(std::string&& value);
  void add_modproof(const char* value);
  void add_modproof(const void* value, std::size_t size);
  void add_modproof(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& modproof() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_modproof();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_modproof() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_modproof();

  public:
  // @@protoc_insertion_point(class_scope:binance.tsslib.ecdsa.keygen.KGRound2Message2)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> de_commitment_;
    ::google::protobuf::RepeatedPtrField<std::string> modproof_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protob_2fecdsa_2dkeygen_2eproto;
};// -------------------------------------------------------------------

class KGRound2Message1 final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:binance.tsslib.ecdsa.keygen.KGRound2Message1) */ {
 public:
  inline KGRound2Message1() : KGRound2Message1(nullptr) {}
  ~KGRound2Message1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KGRound2Message1(::google::protobuf::internal::ConstantInitialized);

  inline KGRound2Message1(const KGRound2Message1& from)
      : KGRound2Message1(nullptr, from) {}
  KGRound2Message1(KGRound2Message1&& from) noexcept
    : KGRound2Message1() {
    *this = ::std::move(from);
  }

  inline KGRound2Message1& operator=(const KGRound2Message1& from) {
    CopyFrom(from);
    return *this;
  }
  inline KGRound2Message1& operator=(KGRound2Message1&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KGRound2Message1& default_instance() {
    return *internal_default_instance();
  }
  static inline const KGRound2Message1* internal_default_instance() {
    return reinterpret_cast<const KGRound2Message1*>(
               &_KGRound2Message1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KGRound2Message1& a, KGRound2Message1& b) {
    a.Swap(&b);
  }
  inline void Swap(KGRound2Message1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KGRound2Message1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KGRound2Message1* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KGRound2Message1>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const KGRound2Message1& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const KGRound2Message1& from) {
    KGRound2Message1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(KGRound2Message1* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "binance.tsslib.ecdsa.keygen.KGRound2Message1";
  }
  protected:
  explicit KGRound2Message1(::google::protobuf::Arena* arena);
  KGRound2Message1(::google::protobuf::Arena* arena, const KGRound2Message1& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFacProofFieldNumber = 2,
    kShareFieldNumber = 1,
  };
  // repeated bytes facProof = 2;
  int facproof_size() const;
  private:
  int _internal_facproof_size() const;

  public:
  void clear_facproof() ;
  const std::string& facproof(int index) const;
  std::string* mutable_facproof(int index);
  void set_facproof(int index, const std::string& value);
  void set_facproof(int index, std::string&& value);
  void set_facproof(int index, const char* value);
  void set_facproof(int index, const void* value, std::size_t size);
  void set_facproof(int index, absl::string_view value);
  std::string* add_facproof();
  void add_facproof(const std::string& value);
  void add_facproof(std::string&& value);
  void add_facproof(const char* value);
  void add_facproof(const void* value, std::size_t size);
  void add_facproof(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& facproof() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_facproof();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_facproof() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_facproof();

  public:
  // bytes share = 1;
  void clear_share() ;
  const std::string& share() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_share(Arg_&& arg, Args_... args);
  std::string* mutable_share();
  PROTOBUF_NODISCARD std::string* release_share();
  void set_allocated_share(std::string* value);

  private:
  const std::string& _internal_share() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_share(
      const std::string& value);
  std::string* _internal_mutable_share();

  public:
  // @@protoc_insertion_point(class_scope:binance.tsslib.ecdsa.keygen.KGRound2Message1)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> facproof_;
    ::google::protobuf::internal::ArenaStringPtr share_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protob_2fecdsa_2dkeygen_2eproto;
};// -------------------------------------------------------------------

class KGRound1Message final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:binance.tsslib.ecdsa.keygen.KGRound1Message) */ {
 public:
  inline KGRound1Message() : KGRound1Message(nullptr) {}
  ~KGRound1Message() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KGRound1Message(::google::protobuf::internal::ConstantInitialized);

  inline KGRound1Message(const KGRound1Message& from)
      : KGRound1Message(nullptr, from) {}
  KGRound1Message(KGRound1Message&& from) noexcept
    : KGRound1Message() {
    *this = ::std::move(from);
  }

  inline KGRound1Message& operator=(const KGRound1Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline KGRound1Message& operator=(KGRound1Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KGRound1Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const KGRound1Message* internal_default_instance() {
    return reinterpret_cast<const KGRound1Message*>(
               &_KGRound1Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KGRound1Message& a, KGRound1Message& b) {
    a.Swap(&b);
  }
  inline void Swap(KGRound1Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KGRound1Message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KGRound1Message* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KGRound1Message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const KGRound1Message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const KGRound1Message& from) {
    KGRound1Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(KGRound1Message* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "binance.tsslib.ecdsa.keygen.KGRound1Message";
  }
  protected:
  explicit KGRound1Message(::google::protobuf::Arena* arena);
  KGRound1Message(::google::protobuf::Arena* arena, const KGRound1Message& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDlnproof1FieldNumber = 6,
    kDlnproof2FieldNumber = 7,
    kCommitmentFieldNumber = 1,
    kPaillierNFieldNumber = 2,
    kNTildeFieldNumber = 3,
    kH1FieldNumber = 4,
    kH2FieldNumber = 5,
  };
  // repeated bytes dlnproof_1 = 6;
  int dlnproof_1_size() const;
  private:
  int _internal_dlnproof_1_size() const;

  public:
  void clear_dlnproof_1() ;
  const std::string& dlnproof_1(int index) const;
  std::string* mutable_dlnproof_1(int index);
  void set_dlnproof_1(int index, const std::string& value);
  void set_dlnproof_1(int index, std::string&& value);
  void set_dlnproof_1(int index, const char* value);
  void set_dlnproof_1(int index, const void* value, std::size_t size);
  void set_dlnproof_1(int index, absl::string_view value);
  std::string* add_dlnproof_1();
  void add_dlnproof_1(const std::string& value);
  void add_dlnproof_1(std::string&& value);
  void add_dlnproof_1(const char* value);
  void add_dlnproof_1(const void* value, std::size_t size);
  void add_dlnproof_1(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& dlnproof_1() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_dlnproof_1();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_dlnproof_1() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_dlnproof_1();

  public:
  // repeated bytes dlnproof_2 = 7;
  int dlnproof_2_size() const;
  private:
  int _internal_dlnproof_2_size() const;

  public:
  void clear_dlnproof_2() ;
  const std::string& dlnproof_2(int index) const;
  std::string* mutable_dlnproof_2(int index);
  void set_dlnproof_2(int index, const std::string& value);
  void set_dlnproof_2(int index, std::string&& value);
  void set_dlnproof_2(int index, const char* value);
  void set_dlnproof_2(int index, const void* value, std::size_t size);
  void set_dlnproof_2(int index, absl::string_view value);
  std::string* add_dlnproof_2();
  void add_dlnproof_2(const std::string& value);
  void add_dlnproof_2(std::string&& value);
  void add_dlnproof_2(const char* value);
  void add_dlnproof_2(const void* value, std::size_t size);
  void add_dlnproof_2(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& dlnproof_2() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_dlnproof_2();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_dlnproof_2() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_dlnproof_2();

  public:
  // bytes commitment = 1;
  void clear_commitment() ;
  const std::string& commitment() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_commitment(Arg_&& arg, Args_... args);
  std::string* mutable_commitment();
  PROTOBUF_NODISCARD std::string* release_commitment();
  void set_allocated_commitment(std::string* value);

  private:
  const std::string& _internal_commitment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commitment(
      const std::string& value);
  std::string* _internal_mutable_commitment();

  public:
  // bytes paillier_n = 2;
  void clear_paillier_n() ;
  const std::string& paillier_n() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_paillier_n(Arg_&& arg, Args_... args);
  std::string* mutable_paillier_n();
  PROTOBUF_NODISCARD std::string* release_paillier_n();
  void set_allocated_paillier_n(std::string* value);

  private:
  const std::string& _internal_paillier_n() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_paillier_n(
      const std::string& value);
  std::string* _internal_mutable_paillier_n();

  public:
  // bytes n_tilde = 3;
  void clear_n_tilde() ;
  const std::string& n_tilde() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_n_tilde(Arg_&& arg, Args_... args);
  std::string* mutable_n_tilde();
  PROTOBUF_NODISCARD std::string* release_n_tilde();
  void set_allocated_n_tilde(std::string* value);

  private:
  const std::string& _internal_n_tilde() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_n_tilde(
      const std::string& value);
  std::string* _internal_mutable_n_tilde();

  public:
  // bytes h1 = 4;
  void clear_h1() ;
  const std::string& h1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_h1(Arg_&& arg, Args_... args);
  std::string* mutable_h1();
  PROTOBUF_NODISCARD std::string* release_h1();
  void set_allocated_h1(std::string* value);

  private:
  const std::string& _internal_h1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_h1(
      const std::string& value);
  std::string* _internal_mutable_h1();

  public:
  // bytes h2 = 5;
  void clear_h2() ;
  const std::string& h2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_h2(Arg_&& arg, Args_... args);
  std::string* mutable_h2();
  PROTOBUF_NODISCARD std::string* release_h2();
  void set_allocated_h2(std::string* value);

  private:
  const std::string& _internal_h2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_h2(
      const std::string& value);
  std::string* _internal_mutable_h2();

  public:
  // @@protoc_insertion_point(class_scope:binance.tsslib.ecdsa.keygen.KGRound1Message)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> dlnproof_1_;
    ::google::protobuf::RepeatedPtrField<std::string> dlnproof_2_;
    ::google::protobuf::internal::ArenaStringPtr commitment_;
    ::google::protobuf::internal::ArenaStringPtr paillier_n_;
    ::google::protobuf::internal::ArenaStringPtr n_tilde_;
    ::google::protobuf::internal::ArenaStringPtr h1_;
    ::google::protobuf::internal::ArenaStringPtr h2_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protob_2fecdsa_2dkeygen_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// KGRound1Message

// bytes commitment = 1;
inline void KGRound1Message::clear_commitment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.commitment_.ClearToEmpty();
}
inline const std::string& KGRound1Message::commitment() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:binance.tsslib.ecdsa.keygen.KGRound1Message.commitment)
  return _internal_commitment();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KGRound1Message::set_commitment(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.commitment_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:binance.tsslib.ecdsa.keygen.KGRound1Message.commitment)
}
inline std::string* KGRound1Message::mutable_commitment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_commitment();
  // @@protoc_insertion_point(field_mutable:binance.tsslib.ecdsa.keygen.KGRound1Message.commitment)
  return _s;
}
inline const std::string& KGRound1Message::_internal_commitment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.commitment_.Get();
}
inline void KGRound1Message::_internal_set_commitment(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.commitment_.Set(value, GetArena());
}
inline std::string* KGRound1Message::_internal_mutable_commitment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.commitment_.Mutable( GetArena());
}
inline std::string* KGRound1Message::release_commitment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:binance.tsslib.ecdsa.keygen.KGRound1Message.commitment)
  return _impl_.commitment_.Release();
}
inline void KGRound1Message::set_allocated_commitment(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.commitment_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.commitment_.IsDefault()) {
          _impl_.commitment_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:binance.tsslib.ecdsa.keygen.KGRound1Message.commitment)
}

// bytes paillier_n = 2;
inline void KGRound1Message::clear_paillier_n() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.paillier_n_.ClearToEmpty();
}
inline const std::string& KGRound1Message::paillier_n() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:binance.tsslib.ecdsa.keygen.KGRound1Message.paillier_n)
  return _internal_paillier_n();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KGRound1Message::set_paillier_n(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.paillier_n_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:binance.tsslib.ecdsa.keygen.KGRound1Message.paillier_n)
}
inline std::string* KGRound1Message::mutable_paillier_n() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_paillier_n();
  // @@protoc_insertion_point(field_mutable:binance.tsslib.ecdsa.keygen.KGRound1Message.paillier_n)
  return _s;
}
inline const std::string& KGRound1Message::_internal_paillier_n() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.paillier_n_.Get();
}
inline void KGRound1Message::_internal_set_paillier_n(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.paillier_n_.Set(value, GetArena());
}
inline std::string* KGRound1Message::_internal_mutable_paillier_n() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.paillier_n_.Mutable( GetArena());
}
inline std::string* KGRound1Message::release_paillier_n() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:binance.tsslib.ecdsa.keygen.KGRound1Message.paillier_n)
  return _impl_.paillier_n_.Release();
}
inline void KGRound1Message::set_allocated_paillier_n(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.paillier_n_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.paillier_n_.IsDefault()) {
          _impl_.paillier_n_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:binance.tsslib.ecdsa.keygen.KGRound1Message.paillier_n)
}

// bytes n_tilde = 3;
inline void KGRound1Message::clear_n_tilde() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.n_tilde_.ClearToEmpty();
}
inline const std::string& KGRound1Message::n_tilde() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:binance.tsslib.ecdsa.keygen.KGRound1Message.n_tilde)
  return _internal_n_tilde();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KGRound1Message::set_n_tilde(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.n_tilde_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:binance.tsslib.ecdsa.keygen.KGRound1Message.n_tilde)
}
inline std::string* KGRound1Message::mutable_n_tilde() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_n_tilde();
  // @@protoc_insertion_point(field_mutable:binance.tsslib.ecdsa.keygen.KGRound1Message.n_tilde)
  return _s;
}
inline const std::string& KGRound1Message::_internal_n_tilde() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.n_tilde_.Get();
}
inline void KGRound1Message::_internal_set_n_tilde(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.n_tilde_.Set(value, GetArena());
}
inline std::string* KGRound1Message::_internal_mutable_n_tilde() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.n_tilde_.Mutable( GetArena());
}
inline std::string* KGRound1Message::release_n_tilde() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:binance.tsslib.ecdsa.keygen.KGRound1Message.n_tilde)
  return _impl_.n_tilde_.Release();
}
inline void KGRound1Message::set_allocated_n_tilde(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.n_tilde_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.n_tilde_.IsDefault()) {
          _impl_.n_tilde_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:binance.tsslib.ecdsa.keygen.KGRound1Message.n_tilde)
}

// bytes h1 = 4;
inline void KGRound1Message::clear_h1() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.h1_.ClearToEmpty();
}
inline const std::string& KGRound1Message::h1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:binance.tsslib.ecdsa.keygen.KGRound1Message.h1)
  return _internal_h1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KGRound1Message::set_h1(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.h1_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:binance.tsslib.ecdsa.keygen.KGRound1Message.h1)
}
inline std::string* KGRound1Message::mutable_h1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_h1();
  // @@protoc_insertion_point(field_mutable:binance.tsslib.ecdsa.keygen.KGRound1Message.h1)
  return _s;
}
inline const std::string& KGRound1Message::_internal_h1() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.h1_.Get();
}
inline void KGRound1Message::_internal_set_h1(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.h1_.Set(value, GetArena());
}
inline std::string* KGRound1Message::_internal_mutable_h1() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.h1_.Mutable( GetArena());
}
inline std::string* KGRound1Message::release_h1() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:binance.tsslib.ecdsa.keygen.KGRound1Message.h1)
  return _impl_.h1_.Release();
}
inline void KGRound1Message::set_allocated_h1(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.h1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.h1_.IsDefault()) {
          _impl_.h1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:binance.tsslib.ecdsa.keygen.KGRound1Message.h1)
}

// bytes h2 = 5;
inline void KGRound1Message::clear_h2() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.h2_.ClearToEmpty();
}
inline const std::string& KGRound1Message::h2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:binance.tsslib.ecdsa.keygen.KGRound1Message.h2)
  return _internal_h2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KGRound1Message::set_h2(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.h2_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:binance.tsslib.ecdsa.keygen.KGRound1Message.h2)
}
inline std::string* KGRound1Message::mutable_h2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_h2();
  // @@protoc_insertion_point(field_mutable:binance.tsslib.ecdsa.keygen.KGRound1Message.h2)
  return _s;
}
inline const std::string& KGRound1Message::_internal_h2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.h2_.Get();
}
inline void KGRound1Message::_internal_set_h2(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.h2_.Set(value, GetArena());
}
inline std::string* KGRound1Message::_internal_mutable_h2() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.h2_.Mutable( GetArena());
}
inline std::string* KGRound1Message::release_h2() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:binance.tsslib.ecdsa.keygen.KGRound1Message.h2)
  return _impl_.h2_.Release();
}
inline void KGRound1Message::set_allocated_h2(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.h2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.h2_.IsDefault()) {
          _impl_.h2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:binance.tsslib.ecdsa.keygen.KGRound1Message.h2)
}

// repeated bytes dlnproof_1 = 6;
inline int KGRound1Message::_internal_dlnproof_1_size() const {
  return _internal_dlnproof_1().size();
}
inline int KGRound1Message::dlnproof_1_size() const {
  return _internal_dlnproof_1_size();
}
inline void KGRound1Message::clear_dlnproof_1() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dlnproof_1_.Clear();
}
inline std::string* KGRound1Message::add_dlnproof_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_dlnproof_1()->Add();
  // @@protoc_insertion_point(field_add_mutable:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_1)
  return _s;
}
inline const std::string& KGRound1Message::dlnproof_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_1)
  return _internal_dlnproof_1().Get(index);
}
inline std::string* KGRound1Message::mutable_dlnproof_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_1)
  return _internal_mutable_dlnproof_1()->Mutable(index);
}
inline void KGRound1Message::set_dlnproof_1(int index, const std::string& value) {
  _internal_mutable_dlnproof_1()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_1)
}
inline void KGRound1Message::set_dlnproof_1(int index, std::string&& value) {
  _internal_mutable_dlnproof_1()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_1)
}
inline void KGRound1Message::set_dlnproof_1(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_dlnproof_1()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_1)
}
inline void KGRound1Message::set_dlnproof_1(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_dlnproof_1()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_1)
}
inline void KGRound1Message::set_dlnproof_1(int index, absl::string_view value) {
  _internal_mutable_dlnproof_1()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_1)
}
inline void KGRound1Message::add_dlnproof_1(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_dlnproof_1()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_1)
}
inline void KGRound1Message::add_dlnproof_1(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_dlnproof_1()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_1)
}
inline void KGRound1Message::add_dlnproof_1(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_dlnproof_1()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_1)
}
inline void KGRound1Message::add_dlnproof_1(const void* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_dlnproof_1()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_1)
}
inline void KGRound1Message::add_dlnproof_1(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_dlnproof_1()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_1)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
KGRound1Message::dlnproof_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_1)
  return _internal_dlnproof_1();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
KGRound1Message::mutable_dlnproof_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_1)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_dlnproof_1();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
KGRound1Message::_internal_dlnproof_1() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dlnproof_1_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
KGRound1Message::_internal_mutable_dlnproof_1() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.dlnproof_1_;
}

// repeated bytes dlnproof_2 = 7;
inline int KGRound1Message::_internal_dlnproof_2_size() const {
  return _internal_dlnproof_2().size();
}
inline int KGRound1Message::dlnproof_2_size() const {
  return _internal_dlnproof_2_size();
}
inline void KGRound1Message::clear_dlnproof_2() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dlnproof_2_.Clear();
}
inline std::string* KGRound1Message::add_dlnproof_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_dlnproof_2()->Add();
  // @@protoc_insertion_point(field_add_mutable:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_2)
  return _s;
}
inline const std::string& KGRound1Message::dlnproof_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_2)
  return _internal_dlnproof_2().Get(index);
}
inline std::string* KGRound1Message::mutable_dlnproof_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_2)
  return _internal_mutable_dlnproof_2()->Mutable(index);
}
inline void KGRound1Message::set_dlnproof_2(int index, const std::string& value) {
  _internal_mutable_dlnproof_2()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_2)
}
inline void KGRound1Message::set_dlnproof_2(int index, std::string&& value) {
  _internal_mutable_dlnproof_2()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_2)
}
inline void KGRound1Message::set_dlnproof_2(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_dlnproof_2()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_2)
}
inline void KGRound1Message::set_dlnproof_2(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_dlnproof_2()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_2)
}
inline void KGRound1Message::set_dlnproof_2(int index, absl::string_view value) {
  _internal_mutable_dlnproof_2()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_2)
}
inline void KGRound1Message::add_dlnproof_2(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_dlnproof_2()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_2)
}
inline void KGRound1Message::add_dlnproof_2(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_dlnproof_2()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_2)
}
inline void KGRound1Message::add_dlnproof_2(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_dlnproof_2()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_2)
}
inline void KGRound1Message::add_dlnproof_2(const void* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_dlnproof_2()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_2)
}
inline void KGRound1Message::add_dlnproof_2(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_dlnproof_2()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_2)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
KGRound1Message::dlnproof_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_2)
  return _internal_dlnproof_2();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
KGRound1Message::mutable_dlnproof_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:binance.tsslib.ecdsa.keygen.KGRound1Message.dlnproof_2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_dlnproof_2();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
KGRound1Message::_internal_dlnproof_2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dlnproof_2_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
KGRound1Message::_internal_mutable_dlnproof_2() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.dlnproof_2_;
}

// -------------------------------------------------------------------

// KGRound2Message1

// bytes share = 1;
inline void KGRound2Message1::clear_share() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.share_.ClearToEmpty();
}
inline const std::string& KGRound2Message1::share() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:binance.tsslib.ecdsa.keygen.KGRound2Message1.share)
  return _internal_share();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KGRound2Message1::set_share(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.share_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:binance.tsslib.ecdsa.keygen.KGRound2Message1.share)
}
inline std::string* KGRound2Message1::mutable_share() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_share();
  // @@protoc_insertion_point(field_mutable:binance.tsslib.ecdsa.keygen.KGRound2Message1.share)
  return _s;
}
inline const std::string& KGRound2Message1::_internal_share() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.share_.Get();
}
inline void KGRound2Message1::_internal_set_share(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.share_.Set(value, GetArena());
}
inline std::string* KGRound2Message1::_internal_mutable_share() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.share_.Mutable( GetArena());
}
inline std::string* KGRound2Message1::release_share() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:binance.tsslib.ecdsa.keygen.KGRound2Message1.share)
  return _impl_.share_.Release();
}
inline void KGRound2Message1::set_allocated_share(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.share_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.share_.IsDefault()) {
          _impl_.share_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:binance.tsslib.ecdsa.keygen.KGRound2Message1.share)
}

// repeated bytes facProof = 2;
inline int KGRound2Message1::_internal_facproof_size() const {
  return _internal_facproof().size();
}
inline int KGRound2Message1::facproof_size() const {
  return _internal_facproof_size();
}
inline void KGRound2Message1::clear_facproof() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.facproof_.Clear();
}
inline std::string* KGRound2Message1::add_facproof()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_facproof()->Add();
  // @@protoc_insertion_point(field_add_mutable:binance.tsslib.ecdsa.keygen.KGRound2Message1.facProof)
  return _s;
}
inline const std::string& KGRound2Message1::facproof(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:binance.tsslib.ecdsa.keygen.KGRound2Message1.facProof)
  return _internal_facproof().Get(index);
}
inline std::string* KGRound2Message1::mutable_facproof(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:binance.tsslib.ecdsa.keygen.KGRound2Message1.facProof)
  return _internal_mutable_facproof()->Mutable(index);
}
inline void KGRound2Message1::set_facproof(int index, const std::string& value) {
  _internal_mutable_facproof()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:binance.tsslib.ecdsa.keygen.KGRound2Message1.facProof)
}
inline void KGRound2Message1::set_facproof(int index, std::string&& value) {
  _internal_mutable_facproof()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:binance.tsslib.ecdsa.keygen.KGRound2Message1.facProof)
}
inline void KGRound2Message1::set_facproof(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_facproof()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:binance.tsslib.ecdsa.keygen.KGRound2Message1.facProof)
}
inline void KGRound2Message1::set_facproof(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_facproof()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:binance.tsslib.ecdsa.keygen.KGRound2Message1.facProof)
}
inline void KGRound2Message1::set_facproof(int index, absl::string_view value) {
  _internal_mutable_facproof()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:binance.tsslib.ecdsa.keygen.KGRound2Message1.facProof)
}
inline void KGRound2Message1::add_facproof(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_facproof()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:binance.tsslib.ecdsa.keygen.KGRound2Message1.facProof)
}
inline void KGRound2Message1::add_facproof(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_facproof()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:binance.tsslib.ecdsa.keygen.KGRound2Message1.facProof)
}
inline void KGRound2Message1::add_facproof(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_facproof()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:binance.tsslib.ecdsa.keygen.KGRound2Message1.facProof)
}
inline void KGRound2Message1::add_facproof(const void* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_facproof()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:binance.tsslib.ecdsa.keygen.KGRound2Message1.facProof)
}
inline void KGRound2Message1::add_facproof(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_facproof()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:binance.tsslib.ecdsa.keygen.KGRound2Message1.facProof)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
KGRound2Message1::facproof() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:binance.tsslib.ecdsa.keygen.KGRound2Message1.facProof)
  return _internal_facproof();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
KGRound2Message1::mutable_facproof() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:binance.tsslib.ecdsa.keygen.KGRound2Message1.facProof)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_facproof();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
KGRound2Message1::_internal_facproof() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.facproof_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
KGRound2Message1::_internal_mutable_facproof() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.facproof_;
}

// -------------------------------------------------------------------

// KGRound2Message2

// repeated bytes de_commitment = 1;
inline int KGRound2Message2::_internal_de_commitment_size() const {
  return _internal_de_commitment().size();
}
inline int KGRound2Message2::de_commitment_size() const {
  return _internal_de_commitment_size();
}
inline void KGRound2Message2::clear_de_commitment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.de_commitment_.Clear();
}
inline std::string* KGRound2Message2::add_de_commitment()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_de_commitment()->Add();
  // @@protoc_insertion_point(field_add_mutable:binance.tsslib.ecdsa.keygen.KGRound2Message2.de_commitment)
  return _s;
}
inline const std::string& KGRound2Message2::de_commitment(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:binance.tsslib.ecdsa.keygen.KGRound2Message2.de_commitment)
  return _internal_de_commitment().Get(index);
}
inline std::string* KGRound2Message2::mutable_de_commitment(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:binance.tsslib.ecdsa.keygen.KGRound2Message2.de_commitment)
  return _internal_mutable_de_commitment()->Mutable(index);
}
inline void KGRound2Message2::set_de_commitment(int index, const std::string& value) {
  _internal_mutable_de_commitment()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:binance.tsslib.ecdsa.keygen.KGRound2Message2.de_commitment)
}
inline void KGRound2Message2::set_de_commitment(int index, std::string&& value) {
  _internal_mutable_de_commitment()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:binance.tsslib.ecdsa.keygen.KGRound2Message2.de_commitment)
}
inline void KGRound2Message2::set_de_commitment(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_de_commitment()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:binance.tsslib.ecdsa.keygen.KGRound2Message2.de_commitment)
}
inline void KGRound2Message2::set_de_commitment(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_de_commitment()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:binance.tsslib.ecdsa.keygen.KGRound2Message2.de_commitment)
}
inline void KGRound2Message2::set_de_commitment(int index, absl::string_view value) {
  _internal_mutable_de_commitment()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:binance.tsslib.ecdsa.keygen.KGRound2Message2.de_commitment)
}
inline void KGRound2Message2::add_de_commitment(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_de_commitment()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:binance.tsslib.ecdsa.keygen.KGRound2Message2.de_commitment)
}
inline void KGRound2Message2::add_de_commitment(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_de_commitment()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:binance.tsslib.ecdsa.keygen.KGRound2Message2.de_commitment)
}
inline void KGRound2Message2::add_de_commitment(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_de_commitment()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:binance.tsslib.ecdsa.keygen.KGRound2Message2.de_commitment)
}
inline void KGRound2Message2::add_de_commitment(const void* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_de_commitment()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:binance.tsslib.ecdsa.keygen.KGRound2Message2.de_commitment)
}
inline void KGRound2Message2::add_de_commitment(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_de_commitment()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:binance.tsslib.ecdsa.keygen.KGRound2Message2.de_commitment)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
KGRound2Message2::de_commitment() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:binance.tsslib.ecdsa.keygen.KGRound2Message2.de_commitment)
  return _internal_de_commitment();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
KGRound2Message2::mutable_de_commitment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:binance.tsslib.ecdsa.keygen.KGRound2Message2.de_commitment)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_de_commitment();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
KGRound2Message2::_internal_de_commitment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.de_commitment_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
KGRound2Message2::_internal_mutable_de_commitment() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.de_commitment_;
}

// repeated bytes modProof = 2;
inline int KGRound2Message2::_internal_modproof_size() const {
  return _internal_modproof().size();
}
inline int KGRound2Message2::modproof_size() const {
  return _internal_modproof_size();
}
inline void KGRound2Message2::clear_modproof() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.modproof_.Clear();
}
inline std::string* KGRound2Message2::add_modproof()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_modproof()->Add();
  // @@protoc_insertion_point(field_add_mutable:binance.tsslib.ecdsa.keygen.KGRound2Message2.modProof)
  return _s;
}
inline const std::string& KGRound2Message2::modproof(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:binance.tsslib.ecdsa.keygen.KGRound2Message2.modProof)
  return _internal_modproof().Get(index);
}
inline std::string* KGRound2Message2::mutable_modproof(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:binance.tsslib.ecdsa.keygen.KGRound2Message2.modProof)
  return _internal_mutable_modproof()->Mutable(index);
}
inline void KGRound2Message2::set_modproof(int index, const std::string& value) {
  _internal_mutable_modproof()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:binance.tsslib.ecdsa.keygen.KGRound2Message2.modProof)
}
inline void KGRound2Message2::set_modproof(int index, std::string&& value) {
  _internal_mutable_modproof()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:binance.tsslib.ecdsa.keygen.KGRound2Message2.modProof)
}
inline void KGRound2Message2::set_modproof(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_modproof()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:binance.tsslib.ecdsa.keygen.KGRound2Message2.modProof)
}
inline void KGRound2Message2::set_modproof(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_modproof()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:binance.tsslib.ecdsa.keygen.KGRound2Message2.modProof)
}
inline void KGRound2Message2::set_modproof(int index, absl::string_view value) {
  _internal_mutable_modproof()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:binance.tsslib.ecdsa.keygen.KGRound2Message2.modProof)
}
inline void KGRound2Message2::add_modproof(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_modproof()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:binance.tsslib.ecdsa.keygen.KGRound2Message2.modProof)
}
inline void KGRound2Message2::add_modproof(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_modproof()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:binance.tsslib.ecdsa.keygen.KGRound2Message2.modProof)
}
inline void KGRound2Message2::add_modproof(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_modproof()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:binance.tsslib.ecdsa.keygen.KGRound2Message2.modProof)
}
inline void KGRound2Message2::add_modproof(const void* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_modproof()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:binance.tsslib.ecdsa.keygen.KGRound2Message2.modProof)
}
inline void KGRound2Message2::add_modproof(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_modproof()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:binance.tsslib.ecdsa.keygen.KGRound2Message2.modProof)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
KGRound2Message2::modproof() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:binance.tsslib.ecdsa.keygen.KGRound2Message2.modProof)
  return _internal_modproof();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
KGRound2Message2::mutable_modproof() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:binance.tsslib.ecdsa.keygen.KGRound2Message2.modProof)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_modproof();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
KGRound2Message2::_internal_modproof() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.modproof_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
KGRound2Message2::_internal_mutable_modproof() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.modproof_;
}

// -------------------------------------------------------------------

// KGRound3Message

// repeated bytes paillier_proof = 1;
inline int KGRound3Message::_internal_paillier_proof_size() const {
  return _internal_paillier_proof().size();
}
inline int KGRound3Message::paillier_proof_size() const {
  return _internal_paillier_proof_size();
}
inline void KGRound3Message::clear_paillier_proof() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.paillier_proof_.Clear();
}
inline std::string* KGRound3Message::add_paillier_proof()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_paillier_proof()->Add();
  // @@protoc_insertion_point(field_add_mutable:binance.tsslib.ecdsa.keygen.KGRound3Message.paillier_proof)
  return _s;
}
inline const std::string& KGRound3Message::paillier_proof(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:binance.tsslib.ecdsa.keygen.KGRound3Message.paillier_proof)
  return _internal_paillier_proof().Get(index);
}
inline std::string* KGRound3Message::mutable_paillier_proof(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:binance.tsslib.ecdsa.keygen.KGRound3Message.paillier_proof)
  return _internal_mutable_paillier_proof()->Mutable(index);
}
inline void KGRound3Message::set_paillier_proof(int index, const std::string& value) {
  _internal_mutable_paillier_proof()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:binance.tsslib.ecdsa.keygen.KGRound3Message.paillier_proof)
}
inline void KGRound3Message::set_paillier_proof(int index, std::string&& value) {
  _internal_mutable_paillier_proof()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:binance.tsslib.ecdsa.keygen.KGRound3Message.paillier_proof)
}
inline void KGRound3Message::set_paillier_proof(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_paillier_proof()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:binance.tsslib.ecdsa.keygen.KGRound3Message.paillier_proof)
}
inline void KGRound3Message::set_paillier_proof(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_paillier_proof()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:binance.tsslib.ecdsa.keygen.KGRound3Message.paillier_proof)
}
inline void KGRound3Message::set_paillier_proof(int index, absl::string_view value) {
  _internal_mutable_paillier_proof()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:binance.tsslib.ecdsa.keygen.KGRound3Message.paillier_proof)
}
inline void KGRound3Message::add_paillier_proof(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_paillier_proof()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:binance.tsslib.ecdsa.keygen.KGRound3Message.paillier_proof)
}
inline void KGRound3Message::add_paillier_proof(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_paillier_proof()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:binance.tsslib.ecdsa.keygen.KGRound3Message.paillier_proof)
}
inline void KGRound3Message::add_paillier_proof(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_paillier_proof()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:binance.tsslib.ecdsa.keygen.KGRound3Message.paillier_proof)
}
inline void KGRound3Message::add_paillier_proof(const void* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_paillier_proof()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:binance.tsslib.ecdsa.keygen.KGRound3Message.paillier_proof)
}
inline void KGRound3Message::add_paillier_proof(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_paillier_proof()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:binance.tsslib.ecdsa.keygen.KGRound3Message.paillier_proof)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
KGRound3Message::paillier_proof() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:binance.tsslib.ecdsa.keygen.KGRound3Message.paillier_proof)
  return _internal_paillier_proof();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
KGRound3Message::mutable_paillier_proof() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:binance.tsslib.ecdsa.keygen.KGRound3Message.paillier_proof)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_paillier_proof();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
KGRound3Message::_internal_paillier_proof() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.paillier_proof_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
KGRound3Message::_internal_mutable_paillier_proof() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.paillier_proof_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace keygen
}  // namespace ecdsa
}  // namespace tsslib
}  // namespace binance


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protob_2fecdsa_2dkeygen_2eproto_2epb_2eh
