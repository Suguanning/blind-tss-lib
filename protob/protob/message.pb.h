// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protob/message.proto
// Protobuf C++ Version: 4.25.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_protob_2fmessage_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protob_2fmessage_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protob_2fmessage_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_protob_2fmessage_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_protob_2fmessage_2eproto;
namespace binance {
namespace tsslib {
class MessageWrapper;
struct MessageWrapperDefaultTypeInternal;
extern MessageWrapperDefaultTypeInternal _MessageWrapper_default_instance_;
class MessageWrapper_PartyID;
struct MessageWrapper_PartyIDDefaultTypeInternal;
extern MessageWrapper_PartyIDDefaultTypeInternal _MessageWrapper_PartyID_default_instance_;
}  // namespace tsslib
}  // namespace binance
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace binance {
namespace tsslib {

// ===================================================================


// -------------------------------------------------------------------

class MessageWrapper_PartyID final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:binance.tsslib.MessageWrapper.PartyID) */ {
 public:
  inline MessageWrapper_PartyID() : MessageWrapper_PartyID(nullptr) {}
  ~MessageWrapper_PartyID() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MessageWrapper_PartyID(::google::protobuf::internal::ConstantInitialized);

  inline MessageWrapper_PartyID(const MessageWrapper_PartyID& from)
      : MessageWrapper_PartyID(nullptr, from) {}
  MessageWrapper_PartyID(MessageWrapper_PartyID&& from) noexcept
    : MessageWrapper_PartyID() {
    *this = ::std::move(from);
  }

  inline MessageWrapper_PartyID& operator=(const MessageWrapper_PartyID& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageWrapper_PartyID& operator=(MessageWrapper_PartyID&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageWrapper_PartyID& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageWrapper_PartyID* internal_default_instance() {
    return reinterpret_cast<const MessageWrapper_PartyID*>(
               &_MessageWrapper_PartyID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageWrapper_PartyID& a, MessageWrapper_PartyID& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageWrapper_PartyID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageWrapper_PartyID* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageWrapper_PartyID* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageWrapper_PartyID>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MessageWrapper_PartyID& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MessageWrapper_PartyID& from) {
    MessageWrapper_PartyID::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MessageWrapper_PartyID* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "binance.tsslib.MessageWrapper.PartyID";
  }
  protected:
  explicit MessageWrapper_PartyID(::google::protobuf::Arena* arena);
  MessageWrapper_PartyID(::google::protobuf::Arena* arena, const MessageWrapper_PartyID& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMonikerFieldNumber = 2,
    kKeyFieldNumber = 3,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string moniker = 2;
  void clear_moniker() ;
  const std::string& moniker() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_moniker(Arg_&& arg, Args_... args);
  std::string* mutable_moniker();
  PROTOBUF_NODISCARD std::string* release_moniker();
  void set_allocated_moniker(std::string* value);

  private:
  const std::string& _internal_moniker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_moniker(
      const std::string& value);
  std::string* _internal_mutable_moniker();

  public:
  // bytes key = 3;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // @@protoc_insertion_point(class_scope:binance.tsslib.MessageWrapper.PartyID)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      55, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr moniker_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protob_2fmessage_2eproto;
};// -------------------------------------------------------------------

class MessageWrapper final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:binance.tsslib.MessageWrapper) */ {
 public:
  inline MessageWrapper() : MessageWrapper(nullptr) {}
  ~MessageWrapper() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MessageWrapper(::google::protobuf::internal::ConstantInitialized);

  inline MessageWrapper(const MessageWrapper& from)
      : MessageWrapper(nullptr, from) {}
  MessageWrapper(MessageWrapper&& from) noexcept
    : MessageWrapper() {
    *this = ::std::move(from);
  }

  inline MessageWrapper& operator=(const MessageWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageWrapper& operator=(MessageWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageWrapper* internal_default_instance() {
    return reinterpret_cast<const MessageWrapper*>(
               &_MessageWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MessageWrapper& a, MessageWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageWrapper* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageWrapper* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageWrapper>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MessageWrapper& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MessageWrapper& from) {
    MessageWrapper::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MessageWrapper* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "binance.tsslib.MessageWrapper";
  }
  protected:
  explicit MessageWrapper(::google::protobuf::Arena* arena);
  MessageWrapper(::google::protobuf::Arena* arena, const MessageWrapper& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using PartyID = MessageWrapper_PartyID;

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 4,
    kFromFieldNumber = 3,
    kMessageFieldNumber = 10,
    kIsBroadcastFieldNumber = 1,
    kIsToOldCommitteeFieldNumber = 2,
    kIsToOldAndNewCommitteesFieldNumber = 5,
  };
  // repeated .binance.tsslib.MessageWrapper.PartyID to = 4;
  int to_size() const;
  private:
  int _internal_to_size() const;

  public:
  void clear_to() ;
  ::binance::tsslib::MessageWrapper_PartyID* mutable_to(int index);
  ::google::protobuf::RepeatedPtrField< ::binance::tsslib::MessageWrapper_PartyID >*
      mutable_to();
  private:
  const ::google::protobuf::RepeatedPtrField<::binance::tsslib::MessageWrapper_PartyID>& _internal_to() const;
  ::google::protobuf::RepeatedPtrField<::binance::tsslib::MessageWrapper_PartyID>* _internal_mutable_to();
  public:
  const ::binance::tsslib::MessageWrapper_PartyID& to(int index) const;
  ::binance::tsslib::MessageWrapper_PartyID* add_to();
  const ::google::protobuf::RepeatedPtrField< ::binance::tsslib::MessageWrapper_PartyID >&
      to() const;
  // .binance.tsslib.MessageWrapper.PartyID from = 3;
  bool has_from() const;
  void clear_from() ;
  const ::binance::tsslib::MessageWrapper_PartyID& from() const;
  PROTOBUF_NODISCARD ::binance::tsslib::MessageWrapper_PartyID* release_from();
  ::binance::tsslib::MessageWrapper_PartyID* mutable_from();
  void set_allocated_from(::binance::tsslib::MessageWrapper_PartyID* value);
  void unsafe_arena_set_allocated_from(::binance::tsslib::MessageWrapper_PartyID* value);
  ::binance::tsslib::MessageWrapper_PartyID* unsafe_arena_release_from();

  private:
  const ::binance::tsslib::MessageWrapper_PartyID& _internal_from() const;
  ::binance::tsslib::MessageWrapper_PartyID* _internal_mutable_from();

  public:
  // .google.protobuf.Any message = 10;
  bool has_message() const;
  void clear_message() ;
  const ::google::protobuf::Any& message() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_message();
  ::google::protobuf::Any* mutable_message();
  void set_allocated_message(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_message(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_message();

  private:
  const ::google::protobuf::Any& _internal_message() const;
  ::google::protobuf::Any* _internal_mutable_message();

  public:
  // bool is_broadcast = 1;
  void clear_is_broadcast() ;
  bool is_broadcast() const;
  void set_is_broadcast(bool value);

  private:
  bool _internal_is_broadcast() const;
  void _internal_set_is_broadcast(bool value);

  public:
  // bool is_to_old_committee = 2;
  void clear_is_to_old_committee() ;
  bool is_to_old_committee() const;
  void set_is_to_old_committee(bool value);

  private:
  bool _internal_is_to_old_committee() const;
  void _internal_set_is_to_old_committee(bool value);

  public:
  // bool is_to_old_and_new_committees = 5;
  void clear_is_to_old_and_new_committees() ;
  bool is_to_old_and_new_committees() const;
  void set_is_to_old_and_new_committees(bool value);

  private:
  bool _internal_is_to_old_and_new_committees() const;
  void _internal_set_is_to_old_and_new_committees(bool value);

  public:
  // @@protoc_insertion_point(class_scope:binance.tsslib.MessageWrapper)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::binance::tsslib::MessageWrapper_PartyID > to_;
    ::binance::tsslib::MessageWrapper_PartyID* from_;
    ::google::protobuf::Any* message_;
    bool is_broadcast_;
    bool is_to_old_committee_;
    bool is_to_old_and_new_committees_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protob_2fmessage_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MessageWrapper_PartyID

// string id = 1;
inline void MessageWrapper_PartyID::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& MessageWrapper_PartyID::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:binance.tsslib.MessageWrapper.PartyID.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageWrapper_PartyID::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:binance.tsslib.MessageWrapper.PartyID.id)
}
inline std::string* MessageWrapper_PartyID::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:binance.tsslib.MessageWrapper.PartyID.id)
  return _s;
}
inline const std::string& MessageWrapper_PartyID::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void MessageWrapper_PartyID::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* MessageWrapper_PartyID::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* MessageWrapper_PartyID::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:binance.tsslib.MessageWrapper.PartyID.id)
  return _impl_.id_.Release();
}
inline void MessageWrapper_PartyID::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:binance.tsslib.MessageWrapper.PartyID.id)
}

// string moniker = 2;
inline void MessageWrapper_PartyID::clear_moniker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.moniker_.ClearToEmpty();
}
inline const std::string& MessageWrapper_PartyID::moniker() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:binance.tsslib.MessageWrapper.PartyID.moniker)
  return _internal_moniker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageWrapper_PartyID::set_moniker(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.moniker_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:binance.tsslib.MessageWrapper.PartyID.moniker)
}
inline std::string* MessageWrapper_PartyID::mutable_moniker() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_moniker();
  // @@protoc_insertion_point(field_mutable:binance.tsslib.MessageWrapper.PartyID.moniker)
  return _s;
}
inline const std::string& MessageWrapper_PartyID::_internal_moniker() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.moniker_.Get();
}
inline void MessageWrapper_PartyID::_internal_set_moniker(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.moniker_.Set(value, GetArena());
}
inline std::string* MessageWrapper_PartyID::_internal_mutable_moniker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.moniker_.Mutable( GetArena());
}
inline std::string* MessageWrapper_PartyID::release_moniker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:binance.tsslib.MessageWrapper.PartyID.moniker)
  return _impl_.moniker_.Release();
}
inline void MessageWrapper_PartyID::set_allocated_moniker(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.moniker_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.moniker_.IsDefault()) {
          _impl_.moniker_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:binance.tsslib.MessageWrapper.PartyID.moniker)
}

// bytes key = 3;
inline void MessageWrapper_PartyID::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& MessageWrapper_PartyID::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:binance.tsslib.MessageWrapper.PartyID.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageWrapper_PartyID::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:binance.tsslib.MessageWrapper.PartyID.key)
}
inline std::string* MessageWrapper_PartyID::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:binance.tsslib.MessageWrapper.PartyID.key)
  return _s;
}
inline const std::string& MessageWrapper_PartyID::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void MessageWrapper_PartyID::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* MessageWrapper_PartyID::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* MessageWrapper_PartyID::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:binance.tsslib.MessageWrapper.PartyID.key)
  return _impl_.key_.Release();
}
inline void MessageWrapper_PartyID::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:binance.tsslib.MessageWrapper.PartyID.key)
}

// -------------------------------------------------------------------

// MessageWrapper

// bool is_broadcast = 1;
inline void MessageWrapper::clear_is_broadcast() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_broadcast_ = false;
}
inline bool MessageWrapper::is_broadcast() const {
  // @@protoc_insertion_point(field_get:binance.tsslib.MessageWrapper.is_broadcast)
  return _internal_is_broadcast();
}
inline void MessageWrapper::set_is_broadcast(bool value) {
  _internal_set_is_broadcast(value);
  // @@protoc_insertion_point(field_set:binance.tsslib.MessageWrapper.is_broadcast)
}
inline bool MessageWrapper::_internal_is_broadcast() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_broadcast_;
}
inline void MessageWrapper::_internal_set_is_broadcast(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_broadcast_ = value;
}

// bool is_to_old_committee = 2;
inline void MessageWrapper::clear_is_to_old_committee() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_to_old_committee_ = false;
}
inline bool MessageWrapper::is_to_old_committee() const {
  // @@protoc_insertion_point(field_get:binance.tsslib.MessageWrapper.is_to_old_committee)
  return _internal_is_to_old_committee();
}
inline void MessageWrapper::set_is_to_old_committee(bool value) {
  _internal_set_is_to_old_committee(value);
  // @@protoc_insertion_point(field_set:binance.tsslib.MessageWrapper.is_to_old_committee)
}
inline bool MessageWrapper::_internal_is_to_old_committee() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_to_old_committee_;
}
inline void MessageWrapper::_internal_set_is_to_old_committee(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_to_old_committee_ = value;
}

// bool is_to_old_and_new_committees = 5;
inline void MessageWrapper::clear_is_to_old_and_new_committees() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_to_old_and_new_committees_ = false;
}
inline bool MessageWrapper::is_to_old_and_new_committees() const {
  // @@protoc_insertion_point(field_get:binance.tsslib.MessageWrapper.is_to_old_and_new_committees)
  return _internal_is_to_old_and_new_committees();
}
inline void MessageWrapper::set_is_to_old_and_new_committees(bool value) {
  _internal_set_is_to_old_and_new_committees(value);
  // @@protoc_insertion_point(field_set:binance.tsslib.MessageWrapper.is_to_old_and_new_committees)
}
inline bool MessageWrapper::_internal_is_to_old_and_new_committees() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_to_old_and_new_committees_;
}
inline void MessageWrapper::_internal_set_is_to_old_and_new_committees(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_to_old_and_new_committees_ = value;
}

// .binance.tsslib.MessageWrapper.PartyID from = 3;
inline bool MessageWrapper::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
  return value;
}
inline void MessageWrapper::clear_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::binance::tsslib::MessageWrapper_PartyID& MessageWrapper::_internal_from() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::binance::tsslib::MessageWrapper_PartyID* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::binance::tsslib::MessageWrapper_PartyID&>(::binance::tsslib::_MessageWrapper_PartyID_default_instance_);
}
inline const ::binance::tsslib::MessageWrapper_PartyID& MessageWrapper::from() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:binance.tsslib.MessageWrapper.from)
  return _internal_from();
}
inline void MessageWrapper::unsafe_arena_set_allocated_from(::binance::tsslib::MessageWrapper_PartyID* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = reinterpret_cast<::binance::tsslib::MessageWrapper_PartyID*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:binance.tsslib.MessageWrapper.from)
}
inline ::binance::tsslib::MessageWrapper_PartyID* MessageWrapper::release_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::binance::tsslib::MessageWrapper_PartyID* released = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::binance::tsslib::MessageWrapper_PartyID* MessageWrapper::unsafe_arena_release_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:binance.tsslib.MessageWrapper.from)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::binance::tsslib::MessageWrapper_PartyID* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::binance::tsslib::MessageWrapper_PartyID* MessageWrapper::_internal_mutable_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::binance::tsslib::MessageWrapper_PartyID>(GetArena());
    _impl_.from_ = reinterpret_cast<::binance::tsslib::MessageWrapper_PartyID*>(p);
  }
  return _impl_.from_;
}
inline ::binance::tsslib::MessageWrapper_PartyID* MessageWrapper::mutable_from() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::binance::tsslib::MessageWrapper_PartyID* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:binance.tsslib.MessageWrapper.from)
  return _msg;
}
inline void MessageWrapper::set_allocated_from(::binance::tsslib::MessageWrapper_PartyID* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::binance::tsslib::MessageWrapper_PartyID*>(_impl_.from_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::binance::tsslib::MessageWrapper_PartyID*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.from_ = reinterpret_cast<::binance::tsslib::MessageWrapper_PartyID*>(value);
  // @@protoc_insertion_point(field_set_allocated:binance.tsslib.MessageWrapper.from)
}

// repeated .binance.tsslib.MessageWrapper.PartyID to = 4;
inline int MessageWrapper::_internal_to_size() const {
  return _internal_to().size();
}
inline int MessageWrapper::to_size() const {
  return _internal_to_size();
}
inline void MessageWrapper::clear_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.to_.Clear();
}
inline ::binance::tsslib::MessageWrapper_PartyID* MessageWrapper::mutable_to(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:binance.tsslib.MessageWrapper.to)
  return _internal_mutable_to()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::binance::tsslib::MessageWrapper_PartyID>* MessageWrapper::mutable_to()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:binance.tsslib.MessageWrapper.to)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_to();
}
inline const ::binance::tsslib::MessageWrapper_PartyID& MessageWrapper::to(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:binance.tsslib.MessageWrapper.to)
  return _internal_to().Get(index);
}
inline ::binance::tsslib::MessageWrapper_PartyID* MessageWrapper::add_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::binance::tsslib::MessageWrapper_PartyID* _add = _internal_mutable_to()->Add();
  // @@protoc_insertion_point(field_add:binance.tsslib.MessageWrapper.to)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::binance::tsslib::MessageWrapper_PartyID>& MessageWrapper::to() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:binance.tsslib.MessageWrapper.to)
  return _internal_to();
}
inline const ::google::protobuf::RepeatedPtrField<::binance::tsslib::MessageWrapper_PartyID>&
MessageWrapper::_internal_to() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.to_;
}
inline ::google::protobuf::RepeatedPtrField<::binance::tsslib::MessageWrapper_PartyID>*
MessageWrapper::_internal_mutable_to() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.to_;
}

// .google.protobuf.Any message = 10;
inline bool MessageWrapper::has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.message_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& MessageWrapper::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Any* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& MessageWrapper::message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:binance.tsslib.MessageWrapper.message)
  return _internal_message();
}
inline void MessageWrapper::unsafe_arena_set_allocated_message(::google::protobuf::Any* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:binance.tsslib.MessageWrapper.message)
}
inline ::google::protobuf::Any* MessageWrapper::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Any* released = _impl_.message_;
  _impl_.message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Any* MessageWrapper::unsafe_arena_release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:binance.tsslib.MessageWrapper.message)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Any* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* MessageWrapper::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.message_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArena());
    _impl_.message_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.message_;
}
inline ::google::protobuf::Any* MessageWrapper::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Any* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:binance.tsslib.MessageWrapper.message)
  return _msg;
}
inline void MessageWrapper::set_allocated_message(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.message_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.message_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:binance.tsslib.MessageWrapper.message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tsslib
}  // namespace binance


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protob_2fmessage_2eproto_2epb_2eh
