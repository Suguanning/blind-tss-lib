// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protob/message.proto

#include "protob/message.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace binance {
namespace tsslib {

inline constexpr MessageWrapper_PartyID::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        moniker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MessageWrapper_PartyID::MessageWrapper_PartyID(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MessageWrapper_PartyIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageWrapper_PartyIDDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageWrapper_PartyIDDefaultTypeInternal() {}
  union {
    MessageWrapper_PartyID _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageWrapper_PartyIDDefaultTypeInternal _MessageWrapper_PartyID_default_instance_;

inline constexpr MessageWrapper::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        to_{},
        from_{nullptr},
        message_{nullptr},
        is_broadcast_{false},
        is_to_old_committee_{false},
        is_to_old_and_new_committees_{false} {}

template <typename>
PROTOBUF_CONSTEXPR MessageWrapper::MessageWrapper(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MessageWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageWrapperDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageWrapperDefaultTypeInternal() {}
  union {
    MessageWrapper _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageWrapperDefaultTypeInternal _MessageWrapper_default_instance_;
}  // namespace tsslib
}  // namespace binance
static ::_pb::Metadata file_level_metadata_protob_2fmessage_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protob_2fmessage_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protob_2fmessage_2eproto = nullptr;
const ::uint32_t TableStruct_protob_2fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::MessageWrapper_PartyID, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::MessageWrapper_PartyID, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::MessageWrapper_PartyID, _impl_.moniker_),
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::MessageWrapper_PartyID, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::MessageWrapper, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::MessageWrapper, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::MessageWrapper, _impl_.is_broadcast_),
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::MessageWrapper, _impl_.is_to_old_committee_),
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::MessageWrapper, _impl_.is_to_old_and_new_committees_),
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::MessageWrapper, _impl_.from_),
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::MessageWrapper, _impl_.to_),
    PROTOBUF_FIELD_OFFSET(::binance::tsslib::MessageWrapper, _impl_.message_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::binance::tsslib::MessageWrapper_PartyID)},
        {11, 25, -1, sizeof(::binance::tsslib::MessageWrapper)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::binance::tsslib::_MessageWrapper_PartyID_default_instance_._instance,
    &::binance::tsslib::_MessageWrapper_default_instance_._instance,
};
const char descriptor_table_protodef_protob_2fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\024protob/message.proto\022\016binance.tsslib\032\031"
    "google/protobuf/any.proto\"\257\002\n\016MessageWra"
    "pper\022\024\n\014is_broadcast\030\001 \001(\010\022\033\n\023is_to_old_"
    "committee\030\002 \001(\010\022$\n\034is_to_old_and_new_com"
    "mittees\030\005 \001(\010\0224\n\004from\030\003 \001(\0132&.binance.ts"
    "slib.MessageWrapper.PartyID\0222\n\002to\030\004 \003(\0132"
    "&.binance.tsslib.MessageWrapper.PartyID\022"
    "%\n\007message\030\n \001(\0132\024.google.protobuf.Any\0323"
    "\n\007PartyID\022\n\n\002id\030\001 \001(\t\022\017\n\007moniker\030\002 \001(\t\022\013"
    "\n\003key\030\003 \001(\014B\007Z\005./tssb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_protob_2fmessage_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::absl::once_flag descriptor_table_protob_2fmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protob_2fmessage_2eproto = {
    false,
    false,
    388,
    descriptor_table_protodef_protob_2fmessage_2eproto,
    "protob/message.proto",
    &descriptor_table_protob_2fmessage_2eproto_once,
    descriptor_table_protob_2fmessage_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_protob_2fmessage_2eproto::offsets,
    file_level_metadata_protob_2fmessage_2eproto,
    file_level_enum_descriptors_protob_2fmessage_2eproto,
    file_level_service_descriptors_protob_2fmessage_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protob_2fmessage_2eproto_getter() {
  return &descriptor_table_protob_2fmessage_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protob_2fmessage_2eproto(&descriptor_table_protob_2fmessage_2eproto);
namespace binance {
namespace tsslib {
// ===================================================================

class MessageWrapper_PartyID::_Internal {
 public:
};

MessageWrapper_PartyID::MessageWrapper_PartyID(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:binance.tsslib.MessageWrapper.PartyID)
}
inline PROTOBUF_NDEBUG_INLINE MessageWrapper_PartyID::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : id_(arena, from.id_),
        moniker_(arena, from.moniker_),
        key_(arena, from.key_),
        _cached_size_{0} {}

MessageWrapper_PartyID::MessageWrapper_PartyID(
    ::google::protobuf::Arena* arena,
    const MessageWrapper_PartyID& from)
    : ::google::protobuf::Message(arena) {
  MessageWrapper_PartyID* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:binance.tsslib.MessageWrapper.PartyID)
}
inline PROTOBUF_NDEBUG_INLINE MessageWrapper_PartyID::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : id_(arena),
        moniker_(arena),
        key_(arena),
        _cached_size_{0} {}

inline void MessageWrapper_PartyID::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MessageWrapper_PartyID::~MessageWrapper_PartyID() {
  // @@protoc_insertion_point(destructor:binance.tsslib.MessageWrapper.PartyID)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MessageWrapper_PartyID::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.id_.Destroy();
  _impl_.moniker_.Destroy();
  _impl_.key_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MessageWrapper_PartyID::Clear() {
// @@protoc_insertion_point(message_clear_start:binance.tsslib.MessageWrapper.PartyID)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.moniker_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MessageWrapper_PartyID::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 55, 2> MessageWrapper_PartyID::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MessageWrapper_PartyID_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper_PartyID, _impl_.id_)}},
    // string moniker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper_PartyID, _impl_.moniker_)}},
    // bytes key = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper_PartyID, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper_PartyID, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string moniker = 2;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper_PartyID, _impl_.moniker_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes key = 3;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper_PartyID, _impl_.key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\45\2\7\0\0\0\0\0"
    "binance.tsslib.MessageWrapper.PartyID"
    "id"
    "moniker"
  }},
};

::uint8_t* MessageWrapper_PartyID::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:binance.tsslib.MessageWrapper.PartyID)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "binance.tsslib.MessageWrapper.PartyID.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string moniker = 2;
  if (!this->_internal_moniker().empty()) {
    const std::string& _s = this->_internal_moniker();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "binance.tsslib.MessageWrapper.PartyID.moniker");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bytes key = 3;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:binance.tsslib.MessageWrapper.PartyID)
  return target;
}

::size_t MessageWrapper_PartyID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:binance.tsslib.MessageWrapper.PartyID)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string moniker = 2;
  if (!this->_internal_moniker().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_moniker());
  }

  // bytes key = 3;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MessageWrapper_PartyID::_class_data_ = {
    MessageWrapper_PartyID::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MessageWrapper_PartyID::GetClassData() const {
  return &_class_data_;
}

void MessageWrapper_PartyID::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MessageWrapper_PartyID*>(&to_msg);
  auto& from = static_cast<const MessageWrapper_PartyID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:binance.tsslib.MessageWrapper.PartyID)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_moniker().empty()) {
    _this->_internal_set_moniker(from._internal_moniker());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MessageWrapper_PartyID::CopyFrom(const MessageWrapper_PartyID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:binance.tsslib.MessageWrapper.PartyID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MessageWrapper_PartyID::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MessageWrapper_PartyID::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MessageWrapper_PartyID::InternalSwap(MessageWrapper_PartyID* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.moniker_, &other->_impl_.moniker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
}

::google::protobuf::Metadata MessageWrapper_PartyID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protob_2fmessage_2eproto_getter, &descriptor_table_protob_2fmessage_2eproto_once,
      file_level_metadata_protob_2fmessage_2eproto[0]);
}
// ===================================================================

class MessageWrapper::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageWrapper>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_._has_bits_);
  static const ::binance::tsslib::MessageWrapper_PartyID& from(const MessageWrapper* msg);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Any& message(const MessageWrapper* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::binance::tsslib::MessageWrapper_PartyID& MessageWrapper::_Internal::from(const MessageWrapper* msg) {
  return *msg->_impl_.from_;
}
const ::google::protobuf::Any& MessageWrapper::_Internal::message(const MessageWrapper* msg) {
  return *msg->_impl_.message_;
}
void MessageWrapper::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.message_ != nullptr) _impl_.message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MessageWrapper::MessageWrapper(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:binance.tsslib.MessageWrapper)
}
inline PROTOBUF_NDEBUG_INLINE MessageWrapper::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        to_{visibility, arena, from.to_} {}

MessageWrapper::MessageWrapper(
    ::google::protobuf::Arena* arena,
    const MessageWrapper& from)
    : ::google::protobuf::Message(arena) {
  MessageWrapper* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.from_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::binance::tsslib::MessageWrapper_PartyID>(arena, *from._impl_.from_)
                : nullptr;
  _impl_.message_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Any>(arena, *from._impl_.message_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_broadcast_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, is_broadcast_),
           offsetof(Impl_, is_to_old_and_new_committees_) -
               offsetof(Impl_, is_broadcast_) +
               sizeof(Impl_::is_to_old_and_new_committees_));

  // @@protoc_insertion_point(copy_constructor:binance.tsslib.MessageWrapper)
}
inline PROTOBUF_NDEBUG_INLINE MessageWrapper::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        to_{visibility, arena} {}

inline void MessageWrapper::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_),
           0,
           offsetof(Impl_, is_to_old_and_new_committees_) -
               offsetof(Impl_, from_) +
               sizeof(Impl_::is_to_old_and_new_committees_));
}
MessageWrapper::~MessageWrapper() {
  // @@protoc_insertion_point(destructor:binance.tsslib.MessageWrapper)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MessageWrapper::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.from_;
  delete _impl_.message_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MessageWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:binance.tsslib.MessageWrapper)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.to_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.message_ != nullptr);
      _impl_.message_->Clear();
    }
  }
  ::memset(&_impl_.is_broadcast_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_to_old_and_new_committees_) -
      reinterpret_cast<char*>(&_impl_.is_broadcast_)) + sizeof(_impl_.is_to_old_and_new_committees_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MessageWrapper::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 3, 0, 2> MessageWrapper::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_._has_bits_),
    0, // no _extensions_
    10, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966752,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MessageWrapper_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool is_broadcast = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MessageWrapper, _impl_.is_broadcast_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.is_broadcast_)}},
    // bool is_to_old_committee = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MessageWrapper, _impl_.is_to_old_committee_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.is_to_old_committee_)}},
    // .binance.tsslib.MessageWrapper.PartyID from = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.from_)}},
    // repeated .binance.tsslib.MessageWrapper.PartyID to = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.to_)}},
    // bool is_to_old_and_new_committees = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MessageWrapper, _impl_.is_to_old_and_new_committees_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.is_to_old_and_new_committees_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool is_broadcast = 1;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.is_broadcast_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_to_old_committee = 2;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.is_to_old_committee_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .binance.tsslib.MessageWrapper.PartyID from = 3;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.from_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .binance.tsslib.MessageWrapper.PartyID to = 4;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.to_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool is_to_old_and_new_committees = 5;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.is_to_old_and_new_committees_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Any message = 10;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.message_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::binance::tsslib::MessageWrapper_PartyID>()},
    {::_pbi::TcParser::GetTable<::binance::tsslib::MessageWrapper_PartyID>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
  }}, {{
  }},
};

::uint8_t* MessageWrapper::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:binance.tsslib.MessageWrapper)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool is_broadcast = 1;
  if (this->_internal_is_broadcast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_is_broadcast(), target);
  }

  // bool is_to_old_committee = 2;
  if (this->_internal_is_to_old_committee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_is_to_old_committee(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .binance.tsslib.MessageWrapper.PartyID from = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // repeated .binance.tsslib.MessageWrapper.PartyID to = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_to_size()); i < n; i++) {
    const auto& repfield = this->_internal_to().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool is_to_old_and_new_committees = 5;
  if (this->_internal_is_to_old_and_new_committees() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_is_to_old_and_new_committees(), target);
  }

  // .google.protobuf.Any message = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:binance.tsslib.MessageWrapper)
  return target;
}

::size_t MessageWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:binance.tsslib.MessageWrapper)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .binance.tsslib.MessageWrapper.PartyID to = 4;
  total_size += 1UL * this->_internal_to_size();
  for (const auto& msg : this->_internal_to()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .binance.tsslib.MessageWrapper.PartyID from = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.from_);
    }

    // .google.protobuf.Any message = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.message_);
    }

  }
  // bool is_broadcast = 1;
  if (this->_internal_is_broadcast() != 0) {
    total_size += 2;
  }

  // bool is_to_old_committee = 2;
  if (this->_internal_is_to_old_committee() != 0) {
    total_size += 2;
  }

  // bool is_to_old_and_new_committees = 5;
  if (this->_internal_is_to_old_and_new_committees() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MessageWrapper::_class_data_ = {
    MessageWrapper::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MessageWrapper::GetClassData() const {
  return &_class_data_;
}

void MessageWrapper::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MessageWrapper*>(&to_msg);
  auto& from = static_cast<const MessageWrapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:binance.tsslib.MessageWrapper)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_to()->MergeFrom(
      from._internal_to());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_from()->::binance::tsslib::MessageWrapper_PartyID::MergeFrom(
          from._internal_from());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_message()->::google::protobuf::Any::MergeFrom(
          from._internal_message());
    }
  }
  if (from._internal_is_broadcast() != 0) {
    _this->_internal_set_is_broadcast(from._internal_is_broadcast());
  }
  if (from._internal_is_to_old_committee() != 0) {
    _this->_internal_set_is_to_old_committee(from._internal_is_to_old_committee());
  }
  if (from._internal_is_to_old_and_new_committees() != 0) {
    _this->_internal_set_is_to_old_and_new_committees(from._internal_is_to_old_and_new_committees());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MessageWrapper::CopyFrom(const MessageWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:binance.tsslib.MessageWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MessageWrapper::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MessageWrapper::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MessageWrapper::InternalSwap(MessageWrapper* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.to_.InternalSwap(&other->_impl_.to_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.is_to_old_and_new_committees_)
      + sizeof(MessageWrapper::_impl_.is_to_old_and_new_committees_)
      - PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::google::protobuf::Metadata MessageWrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protob_2fmessage_2eproto_getter, &descriptor_table_protob_2fmessage_2eproto_once,
      file_level_metadata_protob_2fmessage_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace tsslib
}  // namespace binance
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
